{"name":"Django-sql-reports","tagline":"If you know SQL but not python then it is right tool for generating report","body":"Reports\r\n=====\r\nWrite SQL, it will generate the report.\r\n\r\nQuick start\r\n-----------\r\n\r\n1. Add \"reports\" to your INSTALLED_APPS setting like this::\r\n\r\n        INSTALLED_APPS = (\r\n                ...\r\n                'sqlreports',\r\n            )\r\n\r\n2. Include the polls URLconf in your project urls.py like this::\r\n\r\n    url(r'^reporting-service/', include('sqlreports.urls')),\r\n\r\n3. Run `python manage.py migrate` to create the reports models.\r\n\r\nRun Test APP\r\n-----------\r\n1. git clone https://github.com/anuragjain67/django-sql-reports.git\r\n2. python setup.py develop\r\n3. python test_app/manage.py migrate\r\n4. python test_app/manage.py loaddata test_app/fixtures/data.json\r\n5. python test_app/manage.py test\r\n6. python test_app/manage.py runserver\r\n    > username = anurag, password = anurag\r\n\r\nSecurity:\r\n-----------\r\nIts recommended to use only readonly connection for this app.\r\nSpecify SQLREPORTS_CONNECTION_NAME in your settings.\r\n\r\nTodo:\r\n-----------\r\n### Code Related:\r\n1. Add the pagination feature.\r\n2. Add Run in background feature.\r\n3. Add more test cases\r\n4. Add proper docs with screenshots.\r\n5. Reporting Chart.\r\n6. Add Playground feature for testing reports.\r\n\r\n### Devops Related\r\n1. Add travis. \r\n2. Dockerfile.\r\n3. Add it to heroku.\r\n\r\nContributions:\r\n-----------\r\n* **Your contributions always welcome**\r\n* Pick any code related todo and Give pull request\r\n* You can bring ideas as well.\r\n\r\nCourtesy:\r\n-----------\r\n1. Added schema view feature from [django-sql-explorer](https://github.com/epantry/django-sql-explorer)\r\n2. Took idea of Report Generator and Report Formatter from [django-oscar](https://django-oscar.readthedocs.org)\r\n\r\n","google":"UA-38372346-3","note":"Don't delete this file! It's used internally to help with page regeneration."}